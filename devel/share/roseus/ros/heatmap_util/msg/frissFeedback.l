;; Auto-generated. Do not edit!


(when (boundp 'heatmap_util::frissFeedback)
  (if (not (find-package "HEATMAP_UTIL"))
    (make-package "HEATMAP_UTIL"))
  (shadow 'frissFeedback (find-package "HEATMAP_UTIL")))
(unless (find-package "HEATMAP_UTIL::FRISSFEEDBACK")
  (make-package "HEATMAP_UTIL::FRISSFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude frissFeedback.msg.html


(defclass heatmap_util::frissFeedback
  :super ros::object
  :slots (_feedback ))

(defmethod heatmap_util::frissFeedback
  (:init
   (&key
    ((:feedback __feedback) nil)
    )
   (send-super :init)
   (setq _feedback __feedback)
   self)
  (:feedback
   (&optional (__feedback :null))
   (if (not (eq __feedback :null)) (setq _feedback __feedback)) _feedback)
  (:serialization-length
   ()
   (+
    ;; bool _feedback
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; bool _feedback
       (if _feedback (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; bool _feedback
     (setq _feedback (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get heatmap_util::frissFeedback :md5sum-) "f1f168a39479bedb24dba7a087426182")
(setf (get heatmap_util::frissFeedback :datatype-) "heatmap_util/frissFeedback")
(setf (get heatmap_util::frissFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
bool feedback

")



(provide :heatmap_util/frissFeedback "f1f168a39479bedb24dba7a087426182")


