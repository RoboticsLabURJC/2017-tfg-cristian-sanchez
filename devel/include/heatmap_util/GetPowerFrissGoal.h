// Generated by gencpp from file heatmap_util/GetPowerFrissGoal.msg
// DO NOT EDIT!


#ifndef HEATMAP_UTIL_MESSAGE_GETPOWERFRISSGOAL_H
#define HEATMAP_UTIL_MESSAGE_GETPOWERFRISSGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace heatmap_util
{
template <class ContainerAllocator>
struct GetPowerFrissGoal_
{
  typedef GetPowerFrissGoal_<ContainerAllocator> Type;

  GetPowerFrissGoal_()
    : index()
    , obstacle(false)  {
    }
  GetPowerFrissGoal_(const ContainerAllocator& _alloc)
    : index(_alloc)
    , obstacle(false)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _index_type;
  _index_type index;

   typedef uint8_t _obstacle_type;
  _obstacle_type obstacle;





  typedef boost::shared_ptr< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GetPowerFrissGoal_

typedef ::heatmap_util::GetPowerFrissGoal_<std::allocator<void> > GetPowerFrissGoal;

typedef boost::shared_ptr< ::heatmap_util::GetPowerFrissGoal > GetPowerFrissGoalPtr;
typedef boost::shared_ptr< ::heatmap_util::GetPowerFrissGoal const> GetPowerFrissGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator1> & lhs, const ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.obstacle == rhs.obstacle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator1> & lhs, const ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace heatmap_util

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1822600a2f137b0c0bacd1494b7c3314";
  }

  static const char* value(const ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1822600a2f137b0cULL;
  static const uint64_t static_value2 = 0x0bacd1494b7c3314ULL;
};

template<class ContainerAllocator>
struct DataType< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "heatmap_util/GetPowerFrissGoal";
  }

  static const char* value(const ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int16[] index\n"
"bool obstacle\n"
;
  }

  static const char* value(const ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.obstacle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPowerFrissGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::heatmap_util::GetPowerFrissGoal_<ContainerAllocator>& v)
  {
    s << indent << "index[]" << std::endl;
    for (size_t i = 0; i < v.index.size(); ++i)
    {
      s << indent << "  index[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.index[i]);
    }
    s << indent << "obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEATMAP_UTIL_MESSAGE_GETPOWERFRISSGOAL_H
