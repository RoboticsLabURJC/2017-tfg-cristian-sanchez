// Generated by gencpp from file teleop/Px4Cmd.msg
// DO NOT EDIT!


#ifndef TELEOP_MESSAGE_PX4CMD_H
#define TELEOP_MESSAGE_PX4CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teleop
{
template <class ContainerAllocator>
struct Px4Cmd_
{
  typedef Px4Cmd_<ContainerAllocator> Type;

  Px4Cmd_()
    : cmd(0)  {
    }
  Px4Cmd_(const ContainerAllocator& _alloc)
    : cmd(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cmd_type;
  _cmd_type cmd;





  typedef boost::shared_ptr< ::teleop::Px4Cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teleop::Px4Cmd_<ContainerAllocator> const> ConstPtr;

}; // struct Px4Cmd_

typedef ::teleop::Px4Cmd_<std::allocator<void> > Px4Cmd;

typedef boost::shared_ptr< ::teleop::Px4Cmd > Px4CmdPtr;
typedef boost::shared_ptr< ::teleop::Px4Cmd const> Px4CmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teleop::Px4Cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teleop::Px4Cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::teleop::Px4Cmd_<ContainerAllocator1> & lhs, const ::teleop::Px4Cmd_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::teleop::Px4Cmd_<ContainerAllocator1> & lhs, const ::teleop::Px4Cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace teleop

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::teleop::Px4Cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teleop::Px4Cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teleop::Px4Cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teleop::Px4Cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teleop::Px4Cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teleop::Px4Cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teleop::Px4Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26f05c6e9fb9de81f12f2b92304c2961";
  }

  static const char* value(const ::teleop::Px4Cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26f05c6e9fb9de81ULL;
  static const uint64_t static_value2 = 0xf12f2b92304c2961ULL;
};

template<class ContainerAllocator>
struct DataType< ::teleop::Px4Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teleop/Px4Cmd";
  }

  static const char* value(const ::teleop::Px4Cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teleop::Px4Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 cmd\n"
;
  }

  static const char* value(const ::teleop::Px4Cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teleop::Px4Cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Px4Cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teleop::Px4Cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teleop::Px4Cmd_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TELEOP_MESSAGE_PX4CMD_H
